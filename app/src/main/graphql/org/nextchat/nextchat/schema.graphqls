"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

input Filter {
  column: String!

  value: String!
}

type GraphQLMutations {
  signUp(username: String!, password: String!, confirmPassword: String!): SignUpResponse!

  updatePermission(key: PermissionKey!, roles: [ObjectId!]!): Permission!
}

type NextChatQueries {
  signIn(username: String!, password: String!): SignInResponse!

  permissions: [Permission!]!

  permission(key: PermissionKey!): Permission!

  roles: [Role!]!

  role(id: ObjectId!): Role!

  users(offset: Int! = 0, limit: Int! = 10, order: OrderInput, filters: [Filter!]): PaginationResult!

  user(id: UUID, username: String): User!
}

scalar ObjectId

enum OrderDirection {
  ASC

  DESC
}

input OrderInput {
  by: String!

  direction: OrderDirection!
}

type PaginationResult {
  users: [User!]!

  totalCount: Int!
}

type Permission {
  key: PermissionKey!

  management: PermissionManagement!

  description: String!

  roles: [Role!]!
}

enum PermissionKey {
  VIEW_DASHBOARD

  VIEW_PERMISSIONS

  EDIT_PERMISSION

  VIEW_ROLES

  CREATE_ROLE

  EDIT_ROLE

  VIEW_USERS

  CREATE_USER

  EDIT_USER
}

enum PermissionManagement {
  DASHBOARD

  ROLES

  USERS
}

type Role {
  id: String!

  name: String!

  permissions: [PermissionKey!]!
}

type SignInResponse {
  id: UUID!

  username: String!

  role: String!

  permissions: [PermissionKey!]!

  accessToken: String!
}

type SignUpResponse {
  id: UUID!

  username: String!

  role: String!

  permissions: [PermissionKey!]!

  accessToken: String!

  recoverCodes: [String!]!
}

scalar UUID

type User {
  id: UUID!

  username: String!

  profileImage: String!

  lastLogin: DateTime!

  joinedAt: DateTime!
}

schema {
  query: NextChatQueries
  mutation: GraphQLMutations
}
